#!/usr/bin/env python

__author__ = 'Blayne Campbell'
__date__ = '1/27/15'

##############################################################################
# Vulnerability Testing
# --------------------
#
# Description:
# ------------
# Test all servers for vulnerability status and output results to a log file.
#
#
# Usage:
# ------
# List available tests:
# $ fab -l
#
# Execute a specific test (single host):
# $ fab <testname>
#
# Execute a specific test (multiple hosts):
# $ fab -H host1,host2,host3 <testname>
#
# Execute a specific test (multiple hosts via server file):
# $ fab set_hosts:/path/to/serverfile <testname>
#
# Execute multiple tests on multiple hosts:
# fab -H host1,host2,host3 <testname> <testname>
# OR
# $ fab set_hosts:/path/to/serverfile <testname> <testname>
#
# Logfile: logs/vulnerability-check-<YYYYMMDD--HH-MM-SS>.log
##############################################################################

from datetime import datetime
from fabric.api import *
import logging
import sys
import os
import re

# Set Working Directory
abspath = os.path.abspath(__file__)
dir_name = os.path.dirname(abspath)
os.chdir(dir_name)

# Compile Sources for local architecture
local_arch = local('uname -i', capture=True)
if not os.path.exists('bin'):
    os.mkdir('bin')
if not os.path.isfile('bin/GHOST'):
    local('gcc -o bin/GHOST src/GHOST.c')

# Setup Logging
if not os.path.exists('logs'):
    os.mkdir('logs')
FORMAT = '%(message)s'
logging.basicConfig(filename='logs/vulnerability-check-%s.log'
                             % datetime.now().strftime('%Y%m%d--%H-%M-%S'),
                    format=FORMAT,
                    level=logging.WARNING)

# Fabric Environment Options
env.timeout = 200
env.warn_only = True
env.skip_bad_hosts = True
env.eagerly_disconnect = True


@task
def set_hosts(serverfile=None):
    """ provide multiple server via serverfile
    :param serverfile: /full/path/to/serverfile
    """
    if not serverfile:
        sys.exit('Usage: fab set_hosts:/path/to/serverfile <testname>')
    if not os.path.exists(serverfile):
        sys.exit('ERROR: Server list %s was not found!' % serverfile)
    servers = open(serverfile, 'r').readlines()
    servers = map(lambda s: s.strip(), servers)
    env.hosts = servers


@task
def poodle():
    """ Check SSLv2 and SSLv3 'Poodle' Vulnerability
    SSLv3 - Should be disabled as per Poodle CVE-2014-3566
    SSLv2 - Numerous CVE's Considered weak & deprecated
    """
    with settings(hide('everything'), warn_only=True):
        check_accept = re.compile(r'\bCipher\sis\b')
        check_cypher = re.compile(r'\bCipher\s*:\s0000\b|'
                                  r'\bCipher\s*:\s\(NONE\)\b')
        try:
            result = 'Poodle '
            timeout = run('which timeout')
            ssl2test = run('%s 3 openssl s_client -ssl2 -connect localhost:443'
                           % timeout)
            if check_accept.search(ssl2test):
                check_ssl2 = check_cypher.search(ssl2test)
                if check_ssl2:
                    result += 'SSLv2: OK'
                else:
                    result += 'SSLv2: VULNERABLE'
            else:
                result += 'SSLv2: OK'
            ssl3test = run('%s 3 openssl s_client -ssl3 -connect localhost:443'
                           % timeout)
            if check_accept.search(ssl2test):
                check_ssl3 = check_cypher.search(ssl3test)
                if check_ssl3:
                    result += ' / SSLv3: OK'
                else:
                    result += ' / SSLv3: VULNERABLE'
            else:
                result += ' / SSLv3: OK'
            print("%s: %s" % (env.host, result))
            logging.warning("%s: %s" % (env.host, result))
        except Exception as e:
            logging.warning('%s: Error: %s' % (env.host, e.message))


@task
def shellshock():
    """ Check Bash 'ShellShock' Vulnerability
    """
    with settings(hide('everything'), warn_only=True):
        result = 'Shellshock '
        try:
            check1 = run('env x=\'() { :;}; echo vulnerable\' '
                         'bash -c "echo this is a test"')
            recheck1 = re.search(r'\bvulnerable\b', check1)
            if recheck1:
                result += ' CVE-2014-6271'
            check2 = run('env X=\'() { (shellshock)=>\\\' '
                         'bash -c "echo date"; cat echo; rm ./echo')
            recheck2 = re.search(r'%s'
                                 % datetime.now().strftime('%Y'), check2)
            if recheck2:
                result += ' CVE-2014-7169'
            check3 = run('bash -c \'true <<EOF <<EOF <<EOF <<EOF <<EOF <<EOF '
                         '<<EOF <<EOF <<EOF <<EOF <<EOF <<EOF <<EOF <<EOF\' '
                         '|| echo "CVE-2014-7186 vulnerable"')
            recheck3 = re.search(r'\bCVE-2014-7186 vulnerable\b',
                                 check3)
            if recheck3:
                result += ' CVE-2014-7186'
            check4 = run('(for x in {1..200} ; do echo "for x$x in ; do :"; '
                         'done; for x in {1..200} ; do echo done ; done) | '
                         'bash || echo "CVE-2014-7187 vulnerable"')
            recheck4 = re.search(r'\bCVE-2014-7187 vulnerable\b',
                                 check4)
            if recheck4:
                result += ' CVE-2014-7187'
            check5 = run('shellshock=\'() { echo vulnerable; }\' '
                         'bash -c shellshock')
            recheck5 = re.search(r'\bvulnerable\b',
                                 check5)
            if recheck5:
                result += ' CVE-2014-6278'
            if result == 'Shellshock ':
                result += 'OK'
            print(result)
            logging.warning("%s: %s" % (env.host, result))
        except Exception as e:
            logging.warning('%s: Error: %s' % (env.host, e.message))


@task
def ghost():
    """ Check glibc 'Ghost' Vulnerability
    """
    with settings(hide('everything'), warn_only=True):
        try:
            gcccheck = run('which gcc')
            if gcccheck.return_code == 1:
                print('gcc not found on remote host..'
                      'Sending locally compiled %s ghost binary.' % local_arch)
                put('bin/GHOST', mirror_local_mode=True)
            else:
                print('gcc detected on remote host.. '
                      'Sending ghost source.')
                put('src/GHOST.c', mirror_local_mode=True)
                run('gcc -o GHOST GHOST.c')
                run('rm GHOST.c')
            check = run('./GHOST')
            check = check.upper()
            run('rm GHOST')
            if re.search(r'\bEXEC FORMAT ERROR\b', check):
                arch_check = run('uname -i')
                print('%s: Detected %s architecture..\n'
                      'Install gcc on host and try again.'
                      % (env.host, arch_check))
                logging.warning('%s: Testing for \'Ghost\' failed. '
                                'Architecture Mismatch (%s != %s)'
                                % (env.host, local_arch, arch_check))
            else:
                print('%s is %s' % (env.host, check))
                logging.warning('%s: Ghost %s' % (env.host, check))
        except Exception as e:
            logging.warning('%s: Error: %s' % (env.host, e.message))


@task
def freak():
    """ Check OpenSSL 'FREAK' vulnerability (CVE-2015-0204)
    Identifies services that will require a restart post remediation
    """
    with settings(hide('everything'), warn_only=True):
        result = []
        try:
            check = sudo('lsof | grep DEL | grep -e crypto -e libssl')
            if check.return_code == 1:
                result = 'OK'
                logging.warning("%s: %s" % (env.host, result))
            else:
                services = check.split('\r')
                for service in services:
                    service_name = service.split()[0]
                    result.append(service_name)
                result = list(set(result))
                print("%s: VULNERABLE: %s" % (env.host, ' '.join(result)))
                logging.warning("%s: VULNERABLE: %s" % (env.host,
                                                        ' '.join(result)))
        except Exception as e:
            logging.warning('%s: Error: %s' % (env.host, e.message))
